const https = require('https');
const fs = require('fs');

// „Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„ÇπÂ∞ÇÁî®Ê§úÁ¥¢
async function searchAnytimeFitness() {
    const apiKey = 'AIzaSyDVcClDuehOqCfPIRowZ07ZWrIqyNeEtL4';
    
    // Â≤°Â±±Áúå„ÅÆ‰∏ªË¶ÅÈÉΩÂ∏Ç„Åß„Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„Çπ„ÇíÊ§úÁ¥¢
    const locations = [
        { name: 'Â≤°Â±±Â∏Ç', lat: 34.6617, lng: 133.9341 },
        { name: 'ÂÄâÊï∑Â∏Ç', lat: 34.5966, lng: 133.7722 },
        { name: 'Ê¥•Â±±Â∏Ç', lat: 35.0586, lng: 134.0042 },
        { name: 'ÁéâÈáéÂ∏Ç', lat: 34.4901, lng: 133.9456 }
    ];
    
    const allResults = [];
    
    for (const location of locations) {
        console.log(`üîç ${location.name}„Åß„Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„Çπ„ÇíÊ§úÁ¥¢‰∏≠...`);
        
        // Nearby Search API„Åß„Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„Çπ„ÇíÊ§úÁ¥¢
        const searchQuery = '„Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„Çπ';
        const radius = 20000; // 20km
        
        try {
            const results = await searchNearby(location.lat, location.lng, searchQuery, radius, apiKey);
            
            if (results && results.length > 0) {
                console.log(`‚úÖ ${location.name}„Åß${results.length}‰ª∂Áô∫Ë¶ã`);
                allResults.push(...results);
            } else {
                console.log(`‚ùå ${location.name}„Åß„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü`);
            }
            
            // APIÂà∂Èôê„ÇíËÄÉÊÖÆ„Åó„Å¶ÂæÖÊ©ü
            await sleep(2000);
            
        } catch (error) {
            console.error(`‚ùå ${location.name}„ÅÆÊ§úÁ¥¢„Åß„Ç®„É©„Éº:`, error.message);
        }
    }
    
    // ÈáçË§áÈô§Âéª
    const uniqueResults = removeDuplicates(allResults);
    
    console.log(`\nüìä „Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„ÇπÊ§úÁ¥¢ÁµêÊûú:`);
    console.log(`- Á∑èÁô∫Ë¶ãÊï∞: ${allResults.length}‰ª∂`);
    console.log(`- ÈáçË§áÈô§ÂéªÂæå: ${uniqueResults.length}‰ª∂`);
    
    if (uniqueResults.length > 0) {
        console.log('\nüèãÔ∏è Áô∫Ë¶ã„Åó„Åü„Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„ÇπÂ∫óËàó:');
        uniqueResults.forEach((gym, index) => {
            console.log(`${index + 1}. ${gym.name} - ${gym.address}`);
        });
        
        // CSV„Å´ËøΩÂä†
        await appendToExistingCSV(uniqueResults);
        console.log(`\n‚úÖ ${uniqueResults.length}‰ª∂„Çígyms.csv„Å´ËøΩÂä†„Åó„Åæ„Åó„ÅüÔºÅ`);
    } else {
        console.log('\n‚ùå „Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
    }
    
    return uniqueResults;
}

// Nearby Search API
function searchNearby(lat, lng, keyword, radius, apiKey) {
    return new Promise((resolve, reject) => {
        const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&keyword=${encodeURIComponent(keyword)}&type=gym&language=ja&key=${apiKey}`;
        
        https.get(url, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    if (result.status === 'OK') {
                        const gyms = result.results.map(place => ({
                            name: place.name,
                            address: place.vicinity || place.formatted_address || '',
                            latitude: place.geometry.location.lat,
                            longitude: place.geometry.location.lng,
                            rating: place.rating || '',
                            userRatingsTotal: place.user_ratings_total || '',
                            placeId: place.place_id,
                            businessStatus: place.business_status || 'OPERATIONAL'
                        }));
                        resolve(gyms);
                    } else {
                        console.log(`APIÂøúÁ≠î„Ç®„É©„Éº: ${result.status}`);
                        resolve([]);
                    }
                } catch (error) {
                    reject(error);
                }
            });
        }).on('error', reject);
    });
}

// ÈáçË§áÈô§Âéª
function removeDuplicates(gyms) {
    const unique = [];
    const seen = new Set();
    
    for (const gym of gyms) {
        const key = `${gym.name}-${gym.latitude}-${gym.longitude}`;
        if (!seen.has(key)) {
            seen.add(key);
            unique.push(gym);
        }
    }
    
    return unique;
}

// Êó¢Â≠òCSV„Å´ËøΩÂä†
async function appendToExistingCSV(newGyms) {
    const csvPath = 'gyms.csv';
    
    // Êó¢Â≠òCSV„ÇíË™≠„ÅøËæº„Åø
    let csvContent = '';
    try {
        csvContent = fs.readFileSync(csvPath, 'utf8');
    } catch (error) {
        console.error('CSV„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error.message);
        return;
    }
    
    // Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†
    for (const gym of newGyms) {
        const csvLine = [
            escapeCSV(gym.name),
            escapeCSV(gym.address),
            '', // phone
            '', // website
            gym.latitude,
            gym.longitude,
            gym.rating,
            gym.userRatingsTotal,
            '', // price_info
            '', // opening_hours
            gym.businessStatus,
            'Â≤°Â±±Áúå', // searchCity
            gym.placeId
        ].join(',');
        
        csvContent += csvLine + '\n';
    }
    
    // „Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçÊàª„Åó
    fs.writeFileSync(csvPath, csvContent, 'utf8');
}

// CSVÁî®„Ç®„Çπ„Ç±„Éº„Éó
function escapeCSV(value) {
    if (!value) return '';
    const str = String(value);
    if (str.includes(',') || str.includes('"') || str.includes('\n')) {
        return `"${str.replace(/"/g, '""')}"`;
    }
    return str;
}

// ÂæÖÊ©üÈñ¢Êï∞
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ÂÆüË°å
if (require.main === module) {
    console.log('üèãÔ∏è „Ç®„Éã„Çø„Ç§„É†„Éï„Ç£„ÉÉ„Éà„Éç„ÇπÂ≤°Â±±ÁúåÊ§úÁ¥¢„ÇíÈñãÂßã...');
    searchAnytimeFitness()
        .then(results => {
            console.log('\nüéâ Ê§úÁ¥¢ÂÆå‰∫ÜÔºÅ');
        })
        .catch(error => {
            console.error('‚ùå „Ç®„É©„Éº:', error);
        });
}
